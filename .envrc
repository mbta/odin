use asdf

dotenv

# automatically create and enter python venv
layout python3

# this fuction allows project dependencies to be managed by pip-tools
#  a 'pyproject.toml' file is required in the root of the project
function use_pip-tools() {
    # if VIRTUAL_ENV is not set to direnv default, delete direnv default dir as clean-up
    if [[ "${VIRTUAL_ENV}" != *"$(direnv_layout_dir)/python-$python_version"* ]]; then
        echo "custom VIRTUAL_ENV set, deleting $(direnv_layout_dir)"
        rm -rf $(direnv_layout_dir)
    fi

    local has_pip=0
    if has pip; then
        if [[ $(which pip) = $PWD/* ]]; then
            has_pip=1
        fi
    fi
    if [ $has_pip -eq 0 ]; then
        echo "[use pip-tools] ERROR: No pip installed via layout; add 'layout python3' to .envrc"
        return 1
    fi

    if ! has pip-compile; then
        echo "[use pip-tools] pip-tools missing; installing..."
        pip install pip-tools
    fi

    if [ ! -f "pyproject.toml" ]; then
        echo "[use pip-tools] ERROR: No 'pyproject.toml' file exists, please create..."
        return 1
    fi

    echo "[use pip-tools] resyncing (dev)requirements"
    # create requirements files
    pip-compile --quiet --strip-extras -o requirements.txt
    pip-compile --quiet --strip-extras --extra=dev -o requirements-dev.txt
    # install all pinned requirements to virtual environment
    pip-sync requirements.txt requirements-dev.txt
    # install local project from /src as editable, so code changes are reflected without re-install
    pip install --editable .

    watch_file pyproject.toml
}

use pip-tools